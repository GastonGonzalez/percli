#!/usr/bin/env node

var fs      = require('fs-extra')
var args    = require('commander')
var axios   = require('axios')
var asciify = require('asciify')
const maven = require('maven')
const tasks = require('../lib/tasks')

args.version('1.0.0')
	.option('-d, --download', 'only download')
	.option('-e, --existing', 'install on running server')
	.option('-i, --install',  'only install')
	.parse(process.argv)

/* functions that return promises dont need to be async */

/* Step 1 ==========
==================== */
async function getBanner(){
    return asciify('peregrine cms', {font:'big'}, function(err, res){ console.log(res) });
}

/* Step 2 ==========
==================== */
function getSlingExe(){
    return new Promise( (resolve, reject) => {
        axios({
          method:'get',
          url: 'https://vagrant.headwire.com/sling/9/org.apache.sling.launchpad-9.jar',
          responseType:'stream'
        })
        .then(function(res) {
          let stream = res.data.pipe(fs.createWriteStream('out/sling-9.jar'))
          stream.on('finish', () => { console.log('sling-9 download complete'); resolve() })
        })
        .catch(err => console.log('download err: ', 'sling-9.jar'))
    })
}

/* Step 3 ==========
==================== */
function getPackageList(){
    return axios.get('https://vagrant.headwire.com/peregrine/packages.txt')
}

/* Step 4 ==========
==================== */
function downloadPackages(packages){
    var lines = packages.split('\n')
    /* create array of requests, axios will d/l them in parallel with axios.all */
    return axios.all(lines.map(line => {
        if(line.length === 0) return Promise.resolve
        return axios({
          method:'get',
          url: 'https://vagrant.headwire.com/peregrine/' + line,
          responseType:'stream'
        })
        .then(function(res) {
          res.data.pipe(fs.createWriteStream('out/' +line))
        })
        .catch(err => console.log('download err: ', line))
    }))
}

async function installFile(mvn, line) {
    return     mvn.execute(
                   ['io.wcm.maven.plugins:wcmio-content-package-maven-plugin:install'], {
                   "sling.port": "8080",
                   "vault.file": "out/" + line,
                   "vault.serviceURL": "http://localhost:8080/bin/cpm/package.service.html"
               })

}
/* Step 5 ==========
==================== */
async function installPackages(packages){
    console.log('time to install')
    let mvn = maven.create()
    let files = packages.data.split('\n').filter((line) => { return line.length != 0})
    for(let i = 0; i < files.length; i++) {
        await installFile(mvn, files[i])
    }
}

/* Flow Control ==========
========================== */
async function serverInstall() {
  fs.mkdirsSync('out')
  try {
    // step 1
    await getBanner()
    // step 2
    let packagesList = await getPackageList()
    if(!args.install) {
        await getSlingExe()
        // step 3
        // step 4
        await downloadPackages(packagesList.data)
    }
    // step 5
    if(!args.existing) {
        await tasks.startPeregrine()
    }

    // step 6
    if(!args.download) {
        await installPackages(packagesList)
    }
  } catch (err) {
    console.error('serverInstall err')
    console.error(err)
  }
}

serverInstall()
