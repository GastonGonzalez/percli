#!/usr/bin/env node

const fs   = require('fs-extra')
const args = require('commander')
const { 
  startPeregrine, 
  getPackageList, 
  installPackages,
  setPort
} = require('../lib/tasks')
const { 
  peregrineBanner 
} = require('../lib/banner')
const { 
  downloadFile, 
  downloadFiles 
} = require('../lib/fetch')

args.version('1.0.0')
  .option('-d, --download', 'only download')
  .option('-e, --existing', 'install on running server')
  .option('-i, --install',  'only install')
  .option('-a, --author',  'install as author')
  .option('-p, --publish',  'install as publish')
  .parse(process.argv)

/* Flow Control ==========
========================== */
async function serverInstall() {
  fs.mkdirsSync('out')
  try {
    // step 1
    await peregrineBanner()

    if(!args.install) {

        // step 2
        var packagesList = await getPackageList()

        //step 3
        await downloadFile('https://vagrant.headwire.com/sling/9/org.apache.sling.launchpad-9.jar', 'sling-9.jar')

        // step 4
        await downloadFiles(packagesList)
    }

    if(!args.download) {

        if(!args.existing) {
            // step 5

            fs.mkdirSync('sling')

            let slingproperties = ''
            if(args.publish) {
                slingproperties = `sling.run.modes=publish,notshared\norg.osgi.service.http.port=8180`
                setPort(8180)
            } else if(args.author) {
                slingproperties = `sling.run.modes=authir,notshared\norg.osgi.service.http.port=8080`
            }

            fs.writeFileSync('sling/sling.properties', slingproperties)

            await startPeregrine()
            console.log('after await')
        }

        // step 2
        var packagesList = await getPackageList()

        // step 6
        await installPackages(packagesList)
    }

  } catch (err) {
    console.error('serverInstall err')
    console.error(err)
  }
}

serverInstall()
